{"version":3,"sources":["types/enum.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","utils/utils.tsx","index.tsx"],"names":["FilterType","TodoList","todos","onSelect","selectedTodo","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","filteredBy","onFilteredBy","query","onQuery","value","onChange","event","target","All","Active","Completed","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onLoading","onSelectedTodo","useState","user","setUser","useEffect","userId","catch","Error","finally","href","email","name","App","setTodos","loading","setLoading","setSelectedTodo","setFilteredBy","setQuery","visibleTodos","useMemo","filterBy","normalizeQuery","toLowerCase","trim","filter","includes","getPreperadTodos","isTodoList","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39b78f68.chunk.js","sourcesContent":["export enum FilterType {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  onSelect: (todo: Todo) => void,\n  selectedTodo: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelect,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n          <td className=\"is-vcentered\">{todo.id}</td>\n\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n\n          <td className=\"is-vcentered is-expanded\">\n            <p className={classNames({\n              'has-text-danger': !todo.completed,\n              'has-text-success': todo.completed,\n            })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onSelect(todo)}\n            >\n              <span className=\"icon\">\n                <i className={classNames('far', {\n                  'fa-eye': !selectedTodo,\n                  'fa-eye-slash': selectedTodo?.id === todo.id,\n                })}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { FilterType } from '../../types/enum';\n\ntype Props = {\n  filteredBy: string,\n  onFilteredBy: (value: string) => void,\n  query: string\n  onQuery: (value: string) => void,\n};\n\nexport const TodoFilter:React.FC<Props> = ({\n  filteredBy,\n  onFilteredBy,\n  query,\n  onQuery,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filteredBy}\n          onChange={event => onFilteredBy(event.target.value)}\n        >\n          <option value={FilterType.All}>All</option>\n          <option value={FilterType.Active}>Active</option>\n          <option value={FilterType.Completed}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={event => onQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos')\n  .catch(() => {\n    throw new Error('Error');\n  });\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`)\n  .catch(() => {\n    throw new Error('Error');\n  });\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  onLoading: (value: boolean) => void,\n  selectedTodo: Todo | null,\n  onSelectedTodo: (todo: Todo | null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  onLoading,\n  selectedTodo,\n  onSelectedTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    onLoading(true);\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    getUser(selectedTodo!.userId)\n      .then(setUser)\n      .finally(() => onLoading(false));\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\n// eslint-disable-next-line import/no-cycle\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { FilterType } from './types/enum';\nimport { getPreperadTodos } from './utils/utils';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [filteredBy, setFilteredBy] = useState<string>(FilterType.All);\n  const [query, setQuery] = useState<string>('');\n\n  useEffect(() => {\n    setLoading(true);\n    getTodos()\n      .then(setTodos)\n      .finally(() => setLoading(false));\n  }, []);\n\n  const visibleTodos = useMemo(() => getPreperadTodos(todos, filteredBy, query), [todos, filteredBy, query]);\n  const isTodoList = (!loading || (loading && selectedTodo)) && todos.length !== 0;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filteredBy={filteredBy}\n                onFilteredBy={setFilteredBy}\n                query={query}\n                onQuery={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading && !selectedTodo && (\n                <Loader />\n              )}\n\n              {isTodoList && (\n                <TodoList\n                  todos={visibleTodos}\n                  onSelect={(todo) => setSelectedTodo(todo)}\n                  selectedTodo={selectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          onLoading={setLoading}\n          selectedTodo={selectedTodo}\n          onSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { FilterType } from '../types/enum';\n\nexport function getPreperadTodos(\n  todos: Todo[],\n  filterBy: string,\n  query: string,\n) {\n  let visibleTodos = [...todos];\n\n  if (query) {\n    const normalizeQuery = query.toLowerCase().trim();\n\n    visibleTodos = visibleTodos.filter(todo => (\n      todo.title.toLowerCase().includes(normalizeQuery)));\n  }\n\n  switch (filterBy) {\n    case FilterType.All:\n      return visibleTodos;\n\n    case FilterType.Completed:\n      return visibleTodos.filter(todo => todo.completed);\n\n    case FilterType.Active:\n      return visibleTodos.filter(todo => !todo.completed);\n\n    default:\n      return visibleTodos;\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}